namespace: Sysmel Compiler FrontEnd definition: {

class: ScannerState with: #{
    sourceCode: SourceCode.
    position: Int32.
    line: Int32.
    column: Int32.
    isPreviousCR: Boolean.
}.

:isDigit(:(Character)c :: Boolean) := ('0' <= c) && (c <= '9').
:isE(:(Character)c :: Boolean) := ('e' = c) || ('E' = c).
:isIdentifierStart(:(Character)c :: Boolean) := 
       (('a' <= c) && (c <= 'z'))
    || (('A' <= c) && (c <= 'Z'))
    || '_' = c.
:isIdentifierMiddle(:(Character)c :: Boolean) := isIdentifierStart(c) || isDigit(c).

:peek(:(ScannerState)state, :(Int32)offset :: Character) := {
    :peekPosition := state position + offset.

}.

:advance(:(ScannerState)state :: Void) := {
    
}.

:skipWhite(:(ScannerState)state :: Void) := {
    while: (peek(state, 1) <= ' ') do: {
        advance(state)
    }.

    void
}.

:scanSingleToken(:(ScannerState)state :: Token) := {
    skipWhite(state).

    Token()
}.

public:(
    :scanSourceCode(:(SourceCode)sourceCode :: OrderedCollection) := {
        :tokens := OrderedCollection new.
        :state := ScannerState#{
            sourceCode: sourceCode.
            position: 0i32.
            line: 1i32.
            column: 1i32.
            isPreviousCR: false.
        }.
        tokens
    }.

    :scanString(:(String)string :: OrderedCollection) := {
        :sourceCode := SourceCode#{
            directory: ".".
            language: "sysmel".
            name: "test".
            text: string.
        }.
        scanSourceCode(sourceCode)
    }.
).

Stdio stdout print: scanString("1 + 1"); lf.

}.

